<?php

namespace BackOffice\RO\UtilisateurBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * utilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class utilisateurRepository extends EntityRepository implements UserProviderInterface {

    public function loadUserByUsername($loginUtilisateur) {
        $query = $this
                ->createQueryBuilder('u')
                ->select('u, r')
                ->leftJoin('u.roles', 'r')
                ->where('u.login_utilisateur = :loginUtilisateur OR u.email_utilisateur = :emailUtilisateur')
                ->setParameter('loginUtilisateur', $loginUtilisateur)
                ->setParameter('emailUtilisateur', $loginUtilisateur)
                ->getQuery();
        try {
            // La méthode Query::getSingleResult() lance une exception
            // s'il n'y a pas d'entrée correspondante aux critères
            $resultatLogUtilisateur = $query->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Impossible d\'identifier l\'utlisateur par le login ou mot de passe "%s".', $loginUtilisateur), 0, $e);
        }

        return $resultatLogUtilisateur;
    }

    public function loadRoleByUser($userId) {
        $query = $this
                ->createQueryBuilder('u')
                ->select('u, r')
                ->leftJoin('u.roles', 'r')
                ->where('u.id = :userId')
                ->setParameter('userId', $userId)
                ->getQuery();
        try {
            // La méthode Query::getSingleResult() lance une exception
            // s'il n'y a pas d'entrée correspondante aux critères
            $resultatRoleUtilisateur = $query->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Impossible de récupérer les rôles correspondants".'), 0, $e);
        }

        return $resultatRoleUtilisateur;
    }

    public function refreshUser(UserInterface $utilisateur) {
        $class = get_class($utilisateur);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
            sprintf(
                    'L\'Instance de "%s" n\'est pas support&eacute;e.', $class
            )
            );
        }

        return $this->find($utilisateur->getId());
    }

    public function loadUserForGrid() {
        $query = $this
                ->createQueryBuilder('u')
                ->select("u,
          replaceString(replaceString(replaceString(groupConcat(r.nom_role SEPARATOR ' | '), 'ROLE_USER', 'Utilisateur'), 'ROLE_ADMIN', 'Administrateur'), 'ROLE_SUPER_ADMIN', 'Super Admin') AS concatNomRole")->leftJoin('u.roles', 'r')
                ->groupBy('u.id')
                ->setFirstResult(0)
                ->setMaxResults(20);
        return $query;
    }

    public function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

}
